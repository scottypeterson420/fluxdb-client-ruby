=begin
#Influx API Service

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-beta3

=end

require 'cgi'

module InfluxDB2::API
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Remove a member from a bucket
    # @param user_id [String] The ID of the member to remove.
    # @param bucket_id [String] The bucket ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_buckets_id_members_id(user_id, bucket_id, opts = {})
      delete_buckets_id_members_id_with_http_info(user_id, bucket_id, opts)
      nil
    end

    # Remove a member from a bucket
    # @param user_id [String] The ID of the member to remove.
    # @param bucket_id [String] The bucket ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_buckets_id_members_id_with_http_info(user_id, bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_buckets_id_members_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_buckets_id_members_id"
      end
      # verify the required parameter 'bucket_id' is set
      if @api_client.config.client_side_validation && bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'bucket_id' when calling UsersApi.delete_buckets_id_members_id"
      end
      # resource path
      local_var_path = '/buckets/{bucketID}/members/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'bucketID' + '}', CGI.escape(bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_buckets_id_members_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_buckets_id_members_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an owner from a bucket
    # @param user_id [String] The ID of the owner to remove.
    # @param bucket_id [String] The bucket ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_buckets_id_owners_id(user_id, bucket_id, opts = {})
      delete_buckets_id_owners_id_with_http_info(user_id, bucket_id, opts)
      nil
    end

    # Remove an owner from a bucket
    # @param user_id [String] The ID of the owner to remove.
    # @param bucket_id [String] The bucket ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_buckets_id_owners_id_with_http_info(user_id, bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_buckets_id_owners_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_buckets_id_owners_id"
      end
      # verify the required parameter 'bucket_id' is set
      if @api_client.config.client_side_validation && bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'bucket_id' when calling UsersApi.delete_buckets_id_owners_id"
      end
      # resource path
      local_var_path = '/buckets/{bucketID}/owners/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'bucketID' + '}', CGI.escape(bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_buckets_id_owners_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_buckets_id_owners_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a member from a dashboard
    # @param user_id [String] The ID of the member to remove.
    # @param dashboard_id [String] The dashboard ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_dashboards_id_members_id(user_id, dashboard_id, opts = {})
      delete_dashboards_id_members_id_with_http_info(user_id, dashboard_id, opts)
      nil
    end

    # Remove a member from a dashboard
    # @param user_id [String] The ID of the member to remove.
    # @param dashboard_id [String] The dashboard ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_dashboards_id_members_id_with_http_info(user_id, dashboard_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_dashboards_id_members_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_dashboards_id_members_id"
      end
      # verify the required parameter 'dashboard_id' is set
      if @api_client.config.client_side_validation && dashboard_id.nil?
        fail ArgumentError, "Missing the required parameter 'dashboard_id' when calling UsersApi.delete_dashboards_id_members_id"
      end
      # resource path
      local_var_path = '/dashboards/{dashboardID}/members/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'dashboardID' + '}', CGI.escape(dashboard_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_dashboards_id_members_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_dashboards_id_members_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an owner from a dashboard
    # @param user_id [String] The ID of the owner to remove.
    # @param dashboard_id [String] The dashboard ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_dashboards_id_owners_id(user_id, dashboard_id, opts = {})
      delete_dashboards_id_owners_id_with_http_info(user_id, dashboard_id, opts)
      nil
    end

    # Remove an owner from a dashboard
    # @param user_id [String] The ID of the owner to remove.
    # @param dashboard_id [String] The dashboard ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_dashboards_id_owners_id_with_http_info(user_id, dashboard_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_dashboards_id_owners_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_dashboards_id_owners_id"
      end
      # verify the required parameter 'dashboard_id' is set
      if @api_client.config.client_side_validation && dashboard_id.nil?
        fail ArgumentError, "Missing the required parameter 'dashboard_id' when calling UsersApi.delete_dashboards_id_owners_id"
      end
      # resource path
      local_var_path = '/dashboards/{dashboardID}/owners/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'dashboardID' + '}', CGI.escape(dashboard_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_dashboards_id_owners_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_dashboards_id_owners_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a member from an organization
    # @param user_id [String] The ID of the member to remove.
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_orgs_id_members_id(user_id, org_id, opts = {})
      delete_orgs_id_members_id_with_http_info(user_id, org_id, opts)
      nil
    end

    # Remove a member from an organization
    # @param user_id [String] The ID of the member to remove.
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_orgs_id_members_id_with_http_info(user_id, org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_orgs_id_members_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_orgs_id_members_id"
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling UsersApi.delete_orgs_id_members_id"
      end
      # resource path
      local_var_path = '/orgs/{orgID}/members/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_orgs_id_members_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_orgs_id_members_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an owner from an organization
    # @param user_id [String] The ID of the owner to remove.
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_orgs_id_owners_id(user_id, org_id, opts = {})
      delete_orgs_id_owners_id_with_http_info(user_id, org_id, opts)
      nil
    end

    # Remove an owner from an organization
    # @param user_id [String] The ID of the owner to remove.
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_orgs_id_owners_id_with_http_info(user_id, org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_orgs_id_owners_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_orgs_id_owners_id"
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling UsersApi.delete_orgs_id_owners_id"
      end
      # resource path
      local_var_path = '/orgs/{orgID}/owners/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_orgs_id_owners_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_orgs_id_owners_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a member from a scraper target
    # @param user_id [String] The ID of member to remove.
    # @param scraper_target_id [String] The scraper target ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_scrapers_id_members_id(user_id, scraper_target_id, opts = {})
      delete_scrapers_id_members_id_with_http_info(user_id, scraper_target_id, opts)
      nil
    end

    # Remove a member from a scraper target
    # @param user_id [String] The ID of member to remove.
    # @param scraper_target_id [String] The scraper target ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_scrapers_id_members_id_with_http_info(user_id, scraper_target_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_scrapers_id_members_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_scrapers_id_members_id"
      end
      # verify the required parameter 'scraper_target_id' is set
      if @api_client.config.client_side_validation && scraper_target_id.nil?
        fail ArgumentError, "Missing the required parameter 'scraper_target_id' when calling UsersApi.delete_scrapers_id_members_id"
      end
      # resource path
      local_var_path = '/scrapers/{scraperTargetID}/members/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'scraperTargetID' + '}', CGI.escape(scraper_target_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_scrapers_id_members_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_scrapers_id_members_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an owner from a scraper target
    # @param user_id [String] The ID of owner to remove.
    # @param scraper_target_id [String] The scraper target ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_scrapers_id_owners_id(user_id, scraper_target_id, opts = {})
      delete_scrapers_id_owners_id_with_http_info(user_id, scraper_target_id, opts)
      nil
    end

    # Remove an owner from a scraper target
    # @param user_id [String] The ID of owner to remove.
    # @param scraper_target_id [String] The scraper target ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_scrapers_id_owners_id_with_http_info(user_id, scraper_target_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_scrapers_id_owners_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_scrapers_id_owners_id"
      end
      # verify the required parameter 'scraper_target_id' is set
      if @api_client.config.client_side_validation && scraper_target_id.nil?
        fail ArgumentError, "Missing the required parameter 'scraper_target_id' when calling UsersApi.delete_scrapers_id_owners_id"
      end
      # resource path
      local_var_path = '/scrapers/{scraperTargetID}/owners/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'scraperTargetID' + '}', CGI.escape(scraper_target_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_scrapers_id_owners_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_scrapers_id_owners_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a member from a task
    # @param user_id [String] The ID of the member to remove.
    # @param task_id [String] The task ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_tasks_id_members_id(user_id, task_id, opts = {})
      delete_tasks_id_members_id_with_http_info(user_id, task_id, opts)
      nil
    end

    # Remove a member from a task
    # @param user_id [String] The ID of the member to remove.
    # @param task_id [String] The task ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_tasks_id_members_id_with_http_info(user_id, task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_tasks_id_members_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_tasks_id_members_id"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling UsersApi.delete_tasks_id_members_id"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/members/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_tasks_id_members_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_tasks_id_members_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an owner from a task
    # @param user_id [String] The ID of the owner to remove.
    # @param task_id [String] The task ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_tasks_id_owners_id(user_id, task_id, opts = {})
      delete_tasks_id_owners_id_with_http_info(user_id, task_id, opts)
      nil
    end

    # Remove an owner from a task
    # @param user_id [String] The ID of the owner to remove.
    # @param task_id [String] The task ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_tasks_id_owners_id_with_http_info(user_id, task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_tasks_id_owners_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_tasks_id_owners_id"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling UsersApi.delete_tasks_id_owners_id"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/owners/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_tasks_id_owners_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_tasks_id_owners_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a member from a Telegraf config
    # @param user_id [String] The ID of the member to remove.
    # @param telegraf_id [String] The Telegraf config ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_telegrafs_id_members_id(user_id, telegraf_id, opts = {})
      delete_telegrafs_id_members_id_with_http_info(user_id, telegraf_id, opts)
      nil
    end

    # Remove a member from a Telegraf config
    # @param user_id [String] The ID of the member to remove.
    # @param telegraf_id [String] The Telegraf config ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_telegrafs_id_members_id_with_http_info(user_id, telegraf_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_telegrafs_id_members_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_telegrafs_id_members_id"
      end
      # verify the required parameter 'telegraf_id' is set
      if @api_client.config.client_side_validation && telegraf_id.nil?
        fail ArgumentError, "Missing the required parameter 'telegraf_id' when calling UsersApi.delete_telegrafs_id_members_id"
      end
      # resource path
      local_var_path = '/telegrafs/{telegrafID}/members/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'telegrafID' + '}', CGI.escape(telegraf_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_telegrafs_id_members_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_telegrafs_id_members_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an owner from a Telegraf config
    # @param user_id [String] The ID of the owner to remove.
    # @param telegraf_id [String] The Telegraf config ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_telegrafs_id_owners_id(user_id, telegraf_id, opts = {})
      delete_telegrafs_id_owners_id_with_http_info(user_id, telegraf_id, opts)
      nil
    end

    # Remove an owner from a Telegraf config
    # @param user_id [String] The ID of the owner to remove.
    # @param telegraf_id [String] The Telegraf config ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_telegrafs_id_owners_id_with_http_info(user_id, telegraf_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_telegrafs_id_owners_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_telegrafs_id_owners_id"
      end
      # verify the required parameter 'telegraf_id' is set
      if @api_client.config.client_side_validation && telegraf_id.nil?
        fail ArgumentError, "Missing the required parameter 'telegraf_id' when calling UsersApi.delete_telegrafs_id_owners_id"
      end
      # resource path
      local_var_path = '/telegrafs/{telegrafID}/owners/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'telegrafID' + '}', CGI.escape(telegraf_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_telegrafs_id_owners_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_telegrafs_id_owners_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user
    # @param user_id [String] The ID of the user to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def delete_users_id(user_id, opts = {})
      delete_users_id_with_http_info(user_id, opts)
      nil
    end

    # Delete a user
    # @param user_id [String] The ID of the user to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_users_id_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_users_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_users_id"
      end
      # resource path
      local_var_path = '/users/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_users_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_users_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all users with member privileges for a bucket
    # @param bucket_id [String] The bucket ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMembers]
    def get_buckets_id_members(bucket_id, opts = {})
      data, _status_code, _headers = get_buckets_id_members_with_http_info(bucket_id, opts)
      data
    end

    # List all users with member privileges for a bucket
    # @param bucket_id [String] The bucket ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMembers, Integer, Hash)>] ResourceMembers data, response status code and response headers
    def get_buckets_id_members_with_http_info(bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_buckets_id_members ...'
      end
      # verify the required parameter 'bucket_id' is set
      if @api_client.config.client_side_validation && bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'bucket_id' when calling UsersApi.get_buckets_id_members"
      end
      # resource path
      local_var_path = '/buckets/{bucketID}/members'.sub('{' + 'bucketID' + '}', CGI.escape(bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMembers'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_buckets_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_buckets_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all owners of a bucket
    # @param bucket_id [String] The bucket ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwners]
    def get_buckets_id_owners(bucket_id, opts = {})
      data, _status_code, _headers = get_buckets_id_owners_with_http_info(bucket_id, opts)
      data
    end

    # List all owners of a bucket
    # @param bucket_id [String] The bucket ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwners, Integer, Hash)>] ResourceOwners data, response status code and response headers
    def get_buckets_id_owners_with_http_info(bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_buckets_id_owners ...'
      end
      # verify the required parameter 'bucket_id' is set
      if @api_client.config.client_side_validation && bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'bucket_id' when calling UsersApi.get_buckets_id_owners"
      end
      # resource path
      local_var_path = '/buckets/{bucketID}/owners'.sub('{' + 'bucketID' + '}', CGI.escape(bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwners'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_buckets_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_buckets_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all dashboard members
    # @param dashboard_id [String] The dashboard ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMembers]
    def get_dashboards_id_members(dashboard_id, opts = {})
      data, _status_code, _headers = get_dashboards_id_members_with_http_info(dashboard_id, opts)
      data
    end

    # List all dashboard members
    # @param dashboard_id [String] The dashboard ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMembers, Integer, Hash)>] ResourceMembers data, response status code and response headers
    def get_dashboards_id_members_with_http_info(dashboard_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_dashboards_id_members ...'
      end
      # verify the required parameter 'dashboard_id' is set
      if @api_client.config.client_side_validation && dashboard_id.nil?
        fail ArgumentError, "Missing the required parameter 'dashboard_id' when calling UsersApi.get_dashboards_id_members"
      end
      # resource path
      local_var_path = '/dashboards/{dashboardID}/members'.sub('{' + 'dashboardID' + '}', CGI.escape(dashboard_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMembers'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_dashboards_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_dashboards_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all dashboard owners
    # @param dashboard_id [String] The dashboard ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwners]
    def get_dashboards_id_owners(dashboard_id, opts = {})
      data, _status_code, _headers = get_dashboards_id_owners_with_http_info(dashboard_id, opts)
      data
    end

    # List all dashboard owners
    # @param dashboard_id [String] The dashboard ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwners, Integer, Hash)>] ResourceOwners data, response status code and response headers
    def get_dashboards_id_owners_with_http_info(dashboard_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_dashboards_id_owners ...'
      end
      # verify the required parameter 'dashboard_id' is set
      if @api_client.config.client_side_validation && dashboard_id.nil?
        fail ArgumentError, "Missing the required parameter 'dashboard_id' when calling UsersApi.get_dashboards_id_owners"
      end
      # resource path
      local_var_path = '/dashboards/{dashboardID}/owners'.sub('{' + 'dashboardID' + '}', CGI.escape(dashboard_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwners'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_dashboards_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_dashboards_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the feature flags for the currently authenticated user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Hash<String, Object>]
    def get_flags(opts = {})
      data, _status_code, _headers = get_flags_with_http_info(opts)
      data
    end

    # Return the feature flags for the currently authenticated user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_flags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_flags ...'
      end
      # resource path
      local_var_path = '/flags'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_flags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_flags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the current authenticated user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [User]
    def get_me(opts = {})
      data, _status_code, _headers = get_me_with_http_info(opts)
      data
    end

    # Return the current authenticated user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_me_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_me ...'
      end
      # resource path
      local_var_path = '/me'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_me",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_me\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all members of an organization
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMembers]
    def get_orgs_id_members(org_id, opts = {})
      data, _status_code, _headers = get_orgs_id_members_with_http_info(org_id, opts)
      data
    end

    # List all members of an organization
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMembers, Integer, Hash)>] ResourceMembers data, response status code and response headers
    def get_orgs_id_members_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_orgs_id_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling UsersApi.get_orgs_id_members"
      end
      # resource path
      local_var_path = '/orgs/{orgID}/members'.sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMembers'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_orgs_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_orgs_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all owners of an organization
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwners]
    def get_orgs_id_owners(org_id, opts = {})
      data, _status_code, _headers = get_orgs_id_owners_with_http_info(org_id, opts)
      data
    end

    # List all owners of an organization
    # @param org_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwners, Integer, Hash)>] ResourceOwners data, response status code and response headers
    def get_orgs_id_owners_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_orgs_id_owners ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling UsersApi.get_orgs_id_owners"
      end
      # resource path
      local_var_path = '/orgs/{orgID}/owners'.sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwners'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_orgs_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_orgs_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all users with member privileges for a scraper target
    # @param scraper_target_id [String] The scraper target ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMembers]
    def get_scrapers_id_members(scraper_target_id, opts = {})
      data, _status_code, _headers = get_scrapers_id_members_with_http_info(scraper_target_id, opts)
      data
    end

    # List all users with member privileges for a scraper target
    # @param scraper_target_id [String] The scraper target ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMembers, Integer, Hash)>] ResourceMembers data, response status code and response headers
    def get_scrapers_id_members_with_http_info(scraper_target_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_scrapers_id_members ...'
      end
      # verify the required parameter 'scraper_target_id' is set
      if @api_client.config.client_side_validation && scraper_target_id.nil?
        fail ArgumentError, "Missing the required parameter 'scraper_target_id' when calling UsersApi.get_scrapers_id_members"
      end
      # resource path
      local_var_path = '/scrapers/{scraperTargetID}/members'.sub('{' + 'scraperTargetID' + '}', CGI.escape(scraper_target_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMembers'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_scrapers_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_scrapers_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all owners of a scraper target
    # @param scraper_target_id [String] The scraper target ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwners]
    def get_scrapers_id_owners(scraper_target_id, opts = {})
      data, _status_code, _headers = get_scrapers_id_owners_with_http_info(scraper_target_id, opts)
      data
    end

    # List all owners of a scraper target
    # @param scraper_target_id [String] The scraper target ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwners, Integer, Hash)>] ResourceOwners data, response status code and response headers
    def get_scrapers_id_owners_with_http_info(scraper_target_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_scrapers_id_owners ...'
      end
      # verify the required parameter 'scraper_target_id' is set
      if @api_client.config.client_side_validation && scraper_target_id.nil?
        fail ArgumentError, "Missing the required parameter 'scraper_target_id' when calling UsersApi.get_scrapers_id_owners"
      end
      # resource path
      local_var_path = '/scrapers/{scraperTargetID}/owners'.sub('{' + 'scraperTargetID' + '}', CGI.escape(scraper_target_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwners'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_scrapers_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_scrapers_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all task members
    # @param task_id [String] The task ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMembers]
    def get_tasks_id_members(task_id, opts = {})
      data, _status_code, _headers = get_tasks_id_members_with_http_info(task_id, opts)
      data
    end

    # List all task members
    # @param task_id [String] The task ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMembers, Integer, Hash)>] ResourceMembers data, response status code and response headers
    def get_tasks_id_members_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_tasks_id_members ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling UsersApi.get_tasks_id_members"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/members'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMembers'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_tasks_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_tasks_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all owners of a task
    # @param task_id [String] The task ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwners]
    def get_tasks_id_owners(task_id, opts = {})
      data, _status_code, _headers = get_tasks_id_owners_with_http_info(task_id, opts)
      data
    end

    # List all owners of a task
    # @param task_id [String] The task ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwners, Integer, Hash)>] ResourceOwners data, response status code and response headers
    def get_tasks_id_owners_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_tasks_id_owners ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling UsersApi.get_tasks_id_owners"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/owners'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwners'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_tasks_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_tasks_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all users with member privileges for a Telegraf config
    # @param telegraf_id [String] The Telegraf config ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMembers]
    def get_telegrafs_id_members(telegraf_id, opts = {})
      data, _status_code, _headers = get_telegrafs_id_members_with_http_info(telegraf_id, opts)
      data
    end

    # List all users with member privileges for a Telegraf config
    # @param telegraf_id [String] The Telegraf config ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMembers, Integer, Hash)>] ResourceMembers data, response status code and response headers
    def get_telegrafs_id_members_with_http_info(telegraf_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_telegrafs_id_members ...'
      end
      # verify the required parameter 'telegraf_id' is set
      if @api_client.config.client_side_validation && telegraf_id.nil?
        fail ArgumentError, "Missing the required parameter 'telegraf_id' when calling UsersApi.get_telegrafs_id_members"
      end
      # resource path
      local_var_path = '/telegrafs/{telegrafID}/members'.sub('{' + 'telegrafID' + '}', CGI.escape(telegraf_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMembers'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_telegrafs_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_telegrafs_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all owners of a Telegraf config
    # @param telegraf_id [String] The Telegraf config ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwners]
    def get_telegrafs_id_owners(telegraf_id, opts = {})
      data, _status_code, _headers = get_telegrafs_id_owners_with_http_info(telegraf_id, opts)
      data
    end

    # List all owners of a Telegraf config
    # @param telegraf_id [String] The Telegraf config ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwners, Integer, Hash)>] ResourceOwners data, response status code and response headers
    def get_telegrafs_id_owners_with_http_info(telegraf_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_telegrafs_id_owners ...'
      end
      # verify the required parameter 'telegraf_id' is set
      if @api_client.config.client_side_validation && telegraf_id.nil?
        fail ArgumentError, "Missing the required parameter 'telegraf_id' when calling UsersApi.get_telegrafs_id_owners"
      end
      # resource path
      local_var_path = '/telegrafs/{telegrafID}/owners'.sub('{' + 'telegrafID' + '}', CGI.escape(telegraf_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwners'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_telegrafs_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_telegrafs_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all users
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Users]
    def get_users(opts = {})
      data, _status_code, _headers = get_users_with_http_info(opts)
      data
    end

    # List all users
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(Users, Integer, Hash)>] Users data, response status code and response headers
    def get_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_users ...'
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Users'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a user
    # @param user_id [String] The user ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [User]
    def get_users_id(user_id, opts = {})
      data, _status_code, _headers = get_users_id_with_http_info(user_id, opts)
      data
    end

    # Retrieve a user
    # @param user_id [String] The user ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_users_id_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_users_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.get_users_id"
      end
      # resource path
      local_var_path = '/users/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.get_users_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a user
    # @param user_id [String] The ID of the user to update.
    # @param user [User] User update to apply
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [User]
    def patch_users_id(user_id, user, opts = {})
      data, _status_code, _headers = patch_users_id_with_http_info(user_id, user, opts)
      data
    end

    # Update a user
    # @param user_id [String] The ID of the user to update.
    # @param user [User] User update to apply
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def patch_users_id_with_http_info(user_id, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.patch_users_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.patch_users_id"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UsersApi.patch_users_id"
      end
      # resource path
      local_var_path = '/users/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user)

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.patch_users_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#patch_users_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a member to a bucket
    # @param bucket_id [String] The bucket ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMember]
    def post_buckets_id_members(bucket_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_buckets_id_members_with_http_info(bucket_id, add_resource_member_request_body, opts)
      data
    end

    # Add a member to a bucket
    # @param bucket_id [String] The bucket ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMember, Integer, Hash)>] ResourceMember data, response status code and response headers
    def post_buckets_id_members_with_http_info(bucket_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_buckets_id_members ...'
      end
      # verify the required parameter 'bucket_id' is set
      if @api_client.config.client_side_validation && bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'bucket_id' when calling UsersApi.post_buckets_id_members"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling UsersApi.post_buckets_id_members"
      end
      # resource path
      local_var_path = '/buckets/{bucketID}/members'.sub('{' + 'bucketID' + '}', CGI.escape(bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_buckets_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_buckets_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an owner to a bucket
    # @param bucket_id [String] The bucket ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwner]
    def post_buckets_id_owners(bucket_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_buckets_id_owners_with_http_info(bucket_id, add_resource_member_request_body, opts)
      data
    end

    # Add an owner to a bucket
    # @param bucket_id [String] The bucket ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwner, Integer, Hash)>] ResourceOwner data, response status code and response headers
    def post_buckets_id_owners_with_http_info(bucket_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_buckets_id_owners ...'
      end
      # verify the required parameter 'bucket_id' is set
      if @api_client.config.client_side_validation && bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'bucket_id' when calling UsersApi.post_buckets_id_owners"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling UsersApi.post_buckets_id_owners"
      end
      # resource path
      local_var_path = '/buckets/{bucketID}/owners'.sub('{' + 'bucketID' + '}', CGI.escape(bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_buckets_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_buckets_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a member to a dashboard
    # @param dashboard_id [String] The dashboard ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMember]
    def post_dashboards_id_members(dashboard_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_dashboards_id_members_with_http_info(dashboard_id, add_resource_member_request_body, opts)
      data
    end

    # Add a member to a dashboard
    # @param dashboard_id [String] The dashboard ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMember, Integer, Hash)>] ResourceMember data, response status code and response headers
    def post_dashboards_id_members_with_http_info(dashboard_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_dashboards_id_members ...'
      end
      # verify the required parameter 'dashboard_id' is set
      if @api_client.config.client_side_validation && dashboard_id.nil?
        fail ArgumentError, "Missing the required parameter 'dashboard_id' when calling UsersApi.post_dashboards_id_members"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling UsersApi.post_dashboards_id_members"
      end
      # resource path
      local_var_path = '/dashboards/{dashboardID}/members'.sub('{' + 'dashboardID' + '}', CGI.escape(dashboard_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_dashboards_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_dashboards_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an owner to a dashboard
    # @param dashboard_id [String] The dashboard ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwner]
    def post_dashboards_id_owners(dashboard_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_dashboards_id_owners_with_http_info(dashboard_id, add_resource_member_request_body, opts)
      data
    end

    # Add an owner to a dashboard
    # @param dashboard_id [String] The dashboard ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwner, Integer, Hash)>] ResourceOwner data, response status code and response headers
    def post_dashboards_id_owners_with_http_info(dashboard_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_dashboards_id_owners ...'
      end
      # verify the required parameter 'dashboard_id' is set
      if @api_client.config.client_side_validation && dashboard_id.nil?
        fail ArgumentError, "Missing the required parameter 'dashboard_id' when calling UsersApi.post_dashboards_id_owners"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling UsersApi.post_dashboards_id_owners"
      end
      # resource path
      local_var_path = '/dashboards/{dashboardID}/owners'.sub('{' + 'dashboardID' + '}', CGI.escape(dashboard_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_dashboards_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_dashboards_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a member to an organization
    # @param org_id [String] The organization ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMember]
    def post_orgs_id_members(org_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_orgs_id_members_with_http_info(org_id, add_resource_member_request_body, opts)
      data
    end

    # Add a member to an organization
    # @param org_id [String] The organization ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMember, Integer, Hash)>] ResourceMember data, response status code and response headers
    def post_orgs_id_members_with_http_info(org_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_orgs_id_members ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling UsersApi.post_orgs_id_members"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling UsersApi.post_orgs_id_members"
      end
      # resource path
      local_var_path = '/orgs/{orgID}/members'.sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_orgs_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_orgs_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an owner to an organization
    # @param org_id [String] The organization ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwner]
    def post_orgs_id_owners(org_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_orgs_id_owners_with_http_info(org_id, add_resource_member_request_body, opts)
      data
    end

    # Add an owner to an organization
    # @param org_id [String] The organization ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwner, Integer, Hash)>] ResourceOwner data, response status code and response headers
    def post_orgs_id_owners_with_http_info(org_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_orgs_id_owners ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling UsersApi.post_orgs_id_owners"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling UsersApi.post_orgs_id_owners"
      end
      # resource path
      local_var_path = '/orgs/{orgID}/owners'.sub('{' + 'orgID' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_orgs_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_orgs_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a member to a scraper target
    # @param scraper_target_id [String] The scraper target ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMember]
    def post_scrapers_id_members(scraper_target_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_scrapers_id_members_with_http_info(scraper_target_id, add_resource_member_request_body, opts)
      data
    end

    # Add a member to a scraper target
    # @param scraper_target_id [String] The scraper target ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMember, Integer, Hash)>] ResourceMember data, response status code and response headers
    def post_scrapers_id_members_with_http_info(scraper_target_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_scrapers_id_members ...'
      end
      # verify the required parameter 'scraper_target_id' is set
      if @api_client.config.client_side_validation && scraper_target_id.nil?
        fail ArgumentError, "Missing the required parameter 'scraper_target_id' when calling UsersApi.post_scrapers_id_members"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling UsersApi.post_scrapers_id_members"
      end
      # resource path
      local_var_path = '/scrapers/{scraperTargetID}/members'.sub('{' + 'scraperTargetID' + '}', CGI.escape(scraper_target_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_scrapers_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_scrapers_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an owner to a scraper target
    # @param scraper_target_id [String] The scraper target ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwner]
    def post_scrapers_id_owners(scraper_target_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_scrapers_id_owners_with_http_info(scraper_target_id, add_resource_member_request_body, opts)
      data
    end

    # Add an owner to a scraper target
    # @param scraper_target_id [String] The scraper target ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwner, Integer, Hash)>] ResourceOwner data, response status code and response headers
    def post_scrapers_id_owners_with_http_info(scraper_target_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_scrapers_id_owners ...'
      end
      # verify the required parameter 'scraper_target_id' is set
      if @api_client.config.client_side_validation && scraper_target_id.nil?
        fail ArgumentError, "Missing the required parameter 'scraper_target_id' when calling UsersApi.post_scrapers_id_owners"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling UsersApi.post_scrapers_id_owners"
      end
      # resource path
      local_var_path = '/scrapers/{scraperTargetID}/owners'.sub('{' + 'scraperTargetID' + '}', CGI.escape(scraper_target_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_scrapers_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_scrapers_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a member to a task
    # @param task_id [String] The task ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMember]
    def post_tasks_id_members(task_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_tasks_id_members_with_http_info(task_id, add_resource_member_request_body, opts)
      data
    end

    # Add a member to a task
    # @param task_id [String] The task ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMember, Integer, Hash)>] ResourceMember data, response status code and response headers
    def post_tasks_id_members_with_http_info(task_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_tasks_id_members ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling UsersApi.post_tasks_id_members"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling UsersApi.post_tasks_id_members"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/members'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_tasks_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_tasks_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an owner to a task
    # @param task_id [String] The task ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwner]
    def post_tasks_id_owners(task_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_tasks_id_owners_with_http_info(task_id, add_resource_member_request_body, opts)
      data
    end

    # Add an owner to a task
    # @param task_id [String] The task ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwner, Integer, Hash)>] ResourceOwner data, response status code and response headers
    def post_tasks_id_owners_with_http_info(task_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_tasks_id_owners ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling UsersApi.post_tasks_id_owners"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling UsersApi.post_tasks_id_owners"
      end
      # resource path
      local_var_path = '/tasks/{taskID}/owners'.sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_tasks_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_tasks_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a member to a Telegraf config
    # @param telegraf_id [String] The Telegraf config ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceMember]
    def post_telegrafs_id_members(telegraf_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_telegrafs_id_members_with_http_info(telegraf_id, add_resource_member_request_body, opts)
      data
    end

    # Add a member to a Telegraf config
    # @param telegraf_id [String] The Telegraf config ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as member
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceMember, Integer, Hash)>] ResourceMember data, response status code and response headers
    def post_telegrafs_id_members_with_http_info(telegraf_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_telegrafs_id_members ...'
      end
      # verify the required parameter 'telegraf_id' is set
      if @api_client.config.client_side_validation && telegraf_id.nil?
        fail ArgumentError, "Missing the required parameter 'telegraf_id' when calling UsersApi.post_telegrafs_id_members"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling UsersApi.post_telegrafs_id_members"
      end
      # resource path
      local_var_path = '/telegrafs/{telegrafID}/members'.sub('{' + 'telegrafID' + '}', CGI.escape(telegraf_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_telegrafs_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_telegrafs_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an owner to a Telegraf config
    # @param telegraf_id [String] The Telegraf config ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [ResourceOwner]
    def post_telegrafs_id_owners(telegraf_id, add_resource_member_request_body, opts = {})
      data, _status_code, _headers = post_telegrafs_id_owners_with_http_info(telegraf_id, add_resource_member_request_body, opts)
      data
    end

    # Add an owner to a Telegraf config
    # @param telegraf_id [String] The Telegraf config ID.
    # @param add_resource_member_request_body [AddResourceMemberRequestBody] User to add as owner
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(ResourceOwner, Integer, Hash)>] ResourceOwner data, response status code and response headers
    def post_telegrafs_id_owners_with_http_info(telegraf_id, add_resource_member_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_telegrafs_id_owners ...'
      end
      # verify the required parameter 'telegraf_id' is set
      if @api_client.config.client_side_validation && telegraf_id.nil?
        fail ArgumentError, "Missing the required parameter 'telegraf_id' when calling UsersApi.post_telegrafs_id_owners"
      end
      # verify the required parameter 'add_resource_member_request_body' is set
      if @api_client.config.client_side_validation && add_resource_member_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_member_request_body' when calling UsersApi.post_telegrafs_id_owners"
      end
      # resource path
      local_var_path = '/telegrafs/{telegrafID}/owners'.sub('{' + 'telegrafID' + '}', CGI.escape(telegraf_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_resource_member_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceOwner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_telegrafs_id_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_telegrafs_id_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a user
    # @param user [User] User to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [User]
    def post_users(user, opts = {})
      data, _status_code, _headers = post_users_with_http_info(user, opts)
      data
    end

    # Create a user
    # @param user [User] User to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def post_users_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UsersApi.post_users"
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user)

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a password
    # @param user_id [String] The user ID.
    # @param password_reset_body [PasswordResetBody] New password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def post_users_id_password(user_id, password_reset_body, opts = {})
      post_users_id_password_with_http_info(user_id, password_reset_body, opts)
      nil
    end

    # Update a password
    # @param user_id [String] The user ID.
    # @param password_reset_body [PasswordResetBody] New password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_users_id_password_with_http_info(user_id, password_reset_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users_id_password ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.post_users_id_password"
      end
      # verify the required parameter 'password_reset_body' is set
      if @api_client.config.client_side_validation && password_reset_body.nil?
        fail ArgumentError, "Missing the required parameter 'password_reset_body' when calling UsersApi.post_users_id_password"
      end
      # resource path
      local_var_path = '/users/{userID}/password'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(password_reset_body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.post_users_id_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users_id_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a password
    # @param password_reset_body [PasswordResetBody] New password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [nil]
    def put_me_password(password_reset_body, opts = {})
      put_me_password_with_http_info(password_reset_body, opts)
      nil
    end

    # Update a password
    # @param password_reset_body [PasswordResetBody] New password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zap_trace_span OpenTracing span context
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def put_me_password_with_http_info(password_reset_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.put_me_password ...'
      end
      # verify the required parameter 'password_reset_body' is set
      if @api_client.config.client_side_validation && password_reset_body.nil?
        fail ArgumentError, "Missing the required parameter 'password_reset_body' when calling UsersApi.put_me_password"
      end
      # resource path
      local_var_path = '/me/password'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Zap-Trace-Span'] = opts[:'zap_trace_span'] if !opts[:'zap_trace_span'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(password_reset_body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['header']

      new_options = opts.merge(
        :operation => :"UsersApi.put_me_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#put_me_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
